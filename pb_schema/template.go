// Autogenerated by github.com/snonky/pocketbase-gogen.
// Please feel free to edit after noting the explanation:
//
// This file is an intermediate product of the proxy generation.
// It is called a 'schema as code' or just 'template'. It is not meant to be
// compiled it is only meant for human interaction, place it in a separate package
// but never import it.
// Here's what you can do to influence the final code generation step:
//
// Do:
//   - Edit the struct names. The names are directly copied to the proxy struct definitions.
//   - Remove structs or fields that you don't want in the generated code. Note that upon removing a struct
//     you also have to remove any fields that have that struct as their type.
//   - Edit the type name in the '// select:' comments.
//   - Change the const names of the select options by adding a pair of [] to the // select: comment.
//     Example: // select: MySelectType(optionA, optionB)[OpA, OpB] <-- These constants will represent
//     the select options (like an enum). If you omit the [] the option names are used directly.
//   - Edit the field names. If you do, the generator still needs to know the original database field name.
//     To provide this, add a '// schema-name: [original field name]' comment directly above the field.
//   - Add methods to the template structs. The generator will replace any fields you access with the also
//     generated getters/setters. Be aware of that when repeatedly assigning a template field. You are
//     calling a setter on every assignment. The methods can also call each other.
//
// Do not:
//   - Add structs that do not represent a PB collection.
//   - Add fields that are not part of the PB schema to the structs.
//   - Change the select values in the () of the '// select:' comments'
//   - Remove the '// system:' doc comments from the system fields. Generation will fail if you do so.
//   - Shadow any names from the core.Record struct. Generation will also fail for safety.
//   - Rename fields without preserving the original name with a '// schema-name:' comment.'
//
// If you edit this file, be careful and back it up to prevent the changes from being overridden by
// subsequent runs of the template command. Check out the PocketBase docs to find out how to use the
// generated code in your code: https://pocketbase.io/docs/go-record-proxy/
package pb_schema

import "github.com/pocketbase/pocketbase/tools/types"

type Users struct {
	// system: id
	Id string
	// system: password
	password string
	// system: tokenKey
	tokenKey string
	// system: email
	email string
	// system: emailVisibility
	emailVisibility bool
	// system: verified
	verified bool
	name     string
	avatar   string
	created  types.DateTime
	updated  types.DateTime
}

type PlayingLevel struct {
	// system: id
	Id      string
	name    string
	index   float64
	created types.DateTime
	updated types.DateTime
}

type Club struct {
	// system: id
	Id      string
	name    string
	created types.DateTime
	updated types.DateTime
}

type Player struct {
	// system: id
	Id        string
	firstName string
	lastName  string
	notes     string
	// select: PlayerStatus(notAttending, attending, injured, forfeited, disqualified)
	status  int
	club    *Club
	created types.DateTime
	updated types.DateTime
}

type Competition struct {
	// system: id
	Id       string
	teamSize float64
	// select: GenderCategory(female, male, mixed, any)
	genderCategory         int
	ageGroup               *AgeGroup
	playingLevel           *PlayingLevel
	registrations          []*Team
	tournamentModeSettings *TournamentModeSettings
	seeds                  []*Team
	draw                   []*Team
	matches                []*MatchData
	tieBreakers            []*TieBreaker
	rngSeed                float64
	created                types.DateTime
	updated                types.DateTime
}

type Team struct {
	// system: id
	Id       string
	players  []*Player
	resigned bool
	created  types.DateTime
	updated  types.DateTime
}

type Gymnasium struct {
	// system: id
	Id         string
	name       string
	directions string
	rows       float64
	columns    float64
	created    types.DateTime
	updated    types.DateTime
}

type Court struct {
	// system: id
	Id        string
	gymnasium *Gymnasium
	name      string
	positionX float64
	positionY float64
	isActive  bool
	created   types.DateTime
	updated   types.DateTime
}

type MatchData struct {
	// system: id
	Id                  string
	sets                []*MatchSet
	court               *Court
	withdrawnTeams      []*Team
	startTime           types.DateTime
	courtAssignmentTime types.DateTime
	endTime             types.DateTime
	resultCard          string
	gameSheetPrinted    bool
	created             types.DateTime
	updated             types.DateTime
}

type MatchSet struct {
	// system: id
	Id          string
	team1Points float64
	team2Points float64
	created     types.DateTime
	updated     types.DateTime
}

type TournamentOrganizer struct {
	// system: id
	Id string
	// system: password
	password string
	// system: tokenKey
	tokenKey string
	// system: email
	email string
	// system: emailVisibility
	emailVisibility bool
	// system: verified
	verified bool
	username string
	created  types.DateTime
	updated  types.DateTime
}

type AgeGroup struct {
	// system: id
	Id  string
	age float64
	// select: AgeGroupType(over, under)
	type_   int
	created types.DateTime
	updated types.DateTime
}

type Tournament struct {
	// system: id
	Id                    string
	title                 string
	useAgeGroups          bool
	usePlayingLevels      bool
	dontReprintGameSheets bool
	printQrCodes          bool
	playerRestTime        float64
	// select: QueueMode(manual, autoCourtAssignment, auto)
	queueMode int
	created   types.DateTime
	updated   types.DateTime
}

type TournamentModeSettings struct {
	// system: id
	Id string
	// select: TournamentType(RoundRobin, SingleElimination, GroupKnockout, DoubleElimination, SingleEliminationWithConsolation)
	type_ int
	// select: SeedingMode(random, single, tiered)[RandomSeeds, SingleSeeds, TieredSeeds]
	seedingMode int
	// select: KnockOutMode(single, double, consolation)
	knockOutMode         int
	passes               float64
	numGroups            float64
	numQualifications    float64
	numConsolationRounds float64
	placesToPlayOut      float64
	winningPoints        float64
	winningSets          float64
	maxPoints            float64
	twoPointMargin       bool
	created              types.DateTime
	updated              types.DateTime
}

type TieBreaker struct {
	// system: id
	Id                string
	tieBreakerRanking []*Team
	created           types.DateTime
	updated           types.DateTime
}
